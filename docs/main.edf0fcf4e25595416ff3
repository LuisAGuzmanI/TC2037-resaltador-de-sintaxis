/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var digitos = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0']; // Lista con caracteres de la 'a' a la 'z', 'A' a la 'Z' y '_'  

var caracteres = ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', 'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'ñ', 'z', 'x', 'c', 'b', 'n', 'm', 'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P', 'A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'Ñ', 'Z', 'X', 'C', 'V', 'B', 'N', 'M', '_']; // [{tipo, token}, aumento]

var automata = function automata(str, index) {
  var token = str[index]; // Tokens directos (Uno o dos caracteres)

  switch (token) {
    case '=':
      return [{
        token: token,
        tipo: 'asignacion'
      }, 1];

    case '^':
      return [{
        token: token,
        tipo: 'potencia'
      }, 1];

    case '+':
      return [{
        token: token,
        tipo: 'suma'
      }, 1];

    case '*':
      return [{
        token: token,
        tipo: 'multiplicación'
      }, 1];

    case '(':
      return [{
        token: token,
        tipo: 'parentesis_que_abre'
      }, 1];

    case ')':
      return [{
        token: token,
        tipo: 'parentesis_que_cierra'
      }, 1];

    default:
      if (token === '-' && !digitos.includes(str[index + 1])) {
        return [{
          token: token,
          tipo: 'resta'
        }, 1];
      } else if (token === '/' && str[index + 1] === ' ') {
        return [{
          token: token,
          tipo: 'división'
        }, 1];
      } else if (token === '/' && str[index + 1] === '/') {
        return [{
          token: str.slice(index, str.length),
          tipo: 'comentario'
        }, str.length - index];
      }

      break;
  } // Sentencia para detectar variables con un nombre de 1 a n caracteres


  if (caracteres.includes(token)) {
    var inicio = index;
    var varName = '';

    while (caracteres.includes(str[inicio]) || digitos.includes(str[inicio])) {
      varName += str[inicio];
      inicio += 1;
    }

    return [{
      token: varName,
      tipo: 'variable'
    }, inicio - index];
  } // Sentencia para detectar números de 1 a n digitos, decimales, y con notación cientifica}


  if (token === '-' || digitos.includes(token)) {
    var _inicio = index;
    var _varName = ''; // Variables booleanas para detectar si es un número Real

    var isDecimal = false;
    var isScientific = false;

    if (token === '-') {
      _inicio += 1;
      _varName += token;
    }

    while (digitos.includes(str[_inicio]) || str[_inicio] === '.' && !isDecimal || str[_inicio] == 'E' || str[_inicio] == 'e') {
      if (str[_inicio] == '.') {
        isDecimal = true;
      }

      if (str[_inicio] == 'E' || str[_inicio] == 'e') {
        isScientific = true;
        _varName += str[_inicio];
        _inicio += 1;
      }

      _varName += str[_inicio];
      _inicio += 1;
    } // La sentencia regresa 'Real' si el numero tiene punto decimal o usa notación científica, y regresa 'Entero' si ninguno de estas condiciones se cumple


    return [{
      token: _varName,
      tipo: isDecimal || isScientific ? 'real' : 'entero'
    }, _inicio - index];
  } // Se regresa esto si el programa no fue capaz de determinar el tipo del token dado


  return [{
    token: token,
    tipo: 'otro'
  }, 1];
};

var rawTextToTokens = function rawTextToTokens(rawText) {
  var finalTokens = [];

  var _iterator = _createForOfIteratorHelper(rawText.split('\n')),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var line = _step.value;
      var i = 0;

      while (i < line.length) {
        var _automata = automata(line, i),
            _automata2 = _slicedToArray(_automata, 2),
            elemento = _automata2[0],
            aumento = _automata2[1];

        if (elemento.tipo != 'otro') {
          finalTokens.push(elemento);
        }

        i += aumento;
      }

      finalTokens.push({
        token: '-n',
        tipo: 'salto_de_linea'
      });
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return finalTokens;
};

var app = Vue.createApp({
  data: function data() {
    return {
      tokens: {},
      rawText: ''
    };
  },
  methods: {
    submitForm: function submitForm(e) {
      e.preventDefault(); // console.log(e);

      console.log(this.rawText);
      this.tokens = rawTextToTokens(this.rawText);
      console.log(this.tokens);
    },
    isVariable: function isVariable(tipo) {
      return tipo === 'variable';
    },
    isNumeros: function isNumeros(tipo) {
      return tipo === 'entero' || tipo === 'real';
    },
    isOperador: function isOperador(tipo) {
      return tipo === 'asignacion' || tipo === 'potencia' || tipo === 'multiplicación' || tipo === 'división' || tipo === 'resta';
    },
    isComentario: function isComentario(tipo) {
      return tipo === 'comentario';
    },
    isParentesis: function isParentesis(tipo) {
      return tipo === 'parentesis_que_abre' || tipo === 'parentesis_que_cierra';
    }
  }
});
app.mount('#myApp');
/******/ })()
;